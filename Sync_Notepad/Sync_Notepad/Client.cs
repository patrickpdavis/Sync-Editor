//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;

/// <summary>
/// Class for Clients and their respective operations.
/// Anyone who connects to the server should use this.
/// </summary>

[DataContract]
public class Client
{
    #region Data Members
    //Static Section
    //Locations for where the application starts and where the users are stored and the file extension.
    public static string pathToDir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
    public static string USER_LOCATION = "\\users\\";
    public static string XML_EXT = ".xml";
    //The strength of the Hash function.
    public static int ITERATIONS = 10000;


    
    //Non-Static Section
    //Clients name
    private string name;
    //Clients hashed password
    private string password;
    //True if the client us an admin on the server.
    private bool admin;
    //True if the client is allowed access to the server.
    private bool confirmed;
    //True if the user has checked for text messages in the last 5 seconds.
    private bool online;
    //The salt for the hash password method.
    private byte[] salt;
    //The time the lastText was received.
    public DateTime lastText;
    //The last time the client accessed the server.
    public DateTime lastRequest;
    #endregion

    #region Properties
    //All properties correspond to their respective data members.
    [DataMember]
    public string Name
    {
        get
        {
            return name;
        }

        set
        {
            //Moves all strings to lower case allowing for the server to run without case sensitive names.
            name = value.ToLower();
        }
    }

    [DataMember]
    public string Password
    {
        get
        {
            return password;
        }

        set
        {
            password = value;
        }
    }

    [DataMember]
    public bool Admin
    {
        get
        {
            return admin;
        }

        set
        {
            admin = value;
        }
    }

    [DataMember]
    public bool Confirmed
    {
        get
        {
            return confirmed;
        }

        set
        {
            confirmed = value;
        }
    }

    //Salt is serialized so it can be written to file.
    [DataMember]
    public byte[] Salt
    {
        get
        {
            return salt;
        }

        set
        {
            salt = value;
        }
    }

    //No properties past here are serialized for performance and security reasons.
    public bool Online
    {
        get
        {
            return online;
        }

        set
        {
            online = value;
        }
    }
    #endregion

    #region Constructors
    //These are the constructors for the document class.
    //The first one creates a client object from scratch and the second reads from file.
    public Client(string name, string password)
    {
        this.Name = name;
        this.Password = password;
        this.Online = false;
        this.Salt = null;
        this.lastRequest = new DateTime(0);
    }

    public Client(string name)
    {
        readFromFile(name);
        this.Online = false;
        this.lastRequest = new DateTime(0);
    }
    #endregion

    #region Private Methods
    //This area contains all methods that are private.
    //Reads the client object to file.
    private void readFromFile(string writePath)
    {
        try {
            Client tempObj;
            
            //Reads from the xml file for the client.
            using (FileStream reader = new FileStream(writePath, FileMode.Open, FileAccess.Read))
            {
                DataContractSerializer ser = new DataContractSerializer(typeof(Client));
                tempObj = (Client)ser.ReadObject(reader);
            }

            //Sets all values for the client.
            this.Name = tempObj.Name;
            this.Password = tempObj.Password;
            this.Admin = tempObj.Admin;
            this.Confirmed = tempObj.Confirmed;
            this.Salt = tempObj.salt;

            Console.WriteLine("Reading User from File: " + this.Name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    #endregion

    #region Public Methods
    //This area contains all methods that are public
    //Writes the user to file to its xml file.
    public void writeToFile()
    {
        try {
            string writePath = pathToDir;
            writePath += USER_LOCATION;

            if (!Directory.Exists(writePath))
            {
                Directory.CreateDirectory(writePath);
            }

            writePath += this.name + XML_EXT;

            using (FileStream writer = new FileStream(writePath, FileMode.Create, FileAccess.Write))
            {
                DataContractSerializer ser = new DataContractSerializer(typeof(Client));
                ser.WriteObject(writer, this);
            }

            Console.WriteLine("Writing User to File: " + this.Name);
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    #endregion

    #region Static Methods
    //This area contains all static methods.
    //This method uses the rfc2898 hash class to hash the users password.
    public static Client hashPassword(Client user)
    {
        //tries to perform hash and catches null string
        try
        {
            const int SALT_SIZE = 16;
            byte[] saltInBytes = new byte[SALT_SIZE];

            //Creates a random salt.
            new RNGCryptoServiceProvider().GetBytes(saltInBytes);
            user.Salt = saltInBytes;

            //Generates hash with 16 byte salt, and 10000 iterations
            Rfc2898DeriveBytes hash1 = new Rfc2898DeriveBytes(user.password, saltInBytes, ITERATIONS);

            //Gets the hashed object.
            byte[] hash = hash1.GetBytes(20);

            user.Password = Convert.ToBase64String(hash);

            hash1.Dispose();
            //Returns the user with hashed password and salt assigned.
            return user;

            #region Zach's MD5 Hashing Algorithm
            ////holder for return text
            //string returnText;
            ////converts input text into bytes
            //byte[] textbytes = System.Text.Encoding.Default.GetBytes(password);
            ////creates hash object
            //System.Security.Cryptography.MD5 hash = System.Security.Cryptography.MD5.Create();
            ////gets hashed text as a string
            //returnText = System.Text.Encoding.Default.GetString(hash.ComputeHash(textbytes));
            ////cleans up
            //hash.Dispose();
            ////returns holder for hashed text
            //return returnText; 
            #endregion
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return null;
        }
    }

    //This method checks against the hashed password for a user.
    public static bool checkPassword(Client user, string password)
    {
        try
        {
            // generate hash with 16 byte salt, and 10000 iterations.
            Rfc2898DeriveBytes hash1 = new Rfc2898DeriveBytes(password, user.Salt, ITERATIONS);

            //Gets the hashed object.
            byte[] hash = hash1.GetBytes(20);

            // return hash as string value
            if (Convert.ToBase64String(hash) == user.Password)
            {
                return true;
            }
            return false;

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return false;
        }
    }
    #endregion

    #region Zach's MD5 Hashing Algorithm
    //It was determined that this method was not capable of storing passwords safely.
    ////holder for return text
    //string returnText;
    ////converts input text into bytes
    //byte[] textbytes = System.Text.Encoding.Default.GetBytes(password);
    ////creates hash object
    //System.Security.Cryptography.MD5 hash = System.Security.Cryptography.MD5.Create();
    ////gets hashed text as a string
    //returnText = System.Text.Encoding.Default.GetString(hash.ComputeHash(textbytes));
    ////cleans up
    //hash.Dispose();
    ////returns holder for hashed text
    //return returnText; 
    #endregion
}

