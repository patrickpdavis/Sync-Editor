//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DiffMatchPatch;
using System.IO;
using System.Runtime.Serialization;

/// <summary>
/// Class for Files and their respective operations.
/// </summary>

[DataContract]
public class Document
{
    #region Data Members
    //Static Section
    //Locations for where the application starts and where the files are stored.
    public static string pathToDir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
    public static string FILE_LOCATION = "\\file\\";

    //Non-Static Section
    //Name of the file with extension included.
    private string fileName;
    //Contents of the file.
    private string fileContents;
    //The last patch the document applied and wrote to file.           
    private int saveID;
    //A dictionary of patches corresponding with a key value that identifies the order they
    //were recieved.
    private Dictionary<int, List<Patch>> patches;
    //The user that can change the document.
    private Client lockedUser;
    //A diff Match Patch object from the google api.         
    private diff_match_patch diffMatch;
    #endregion

    #region Properties
    //All properties correspond to their respective data members.
    [DataMember]
    public string FileName
    {
        get
        {
            return fileName;
        }

        set
        {
            fileName = value;
        }
    }

    [DataMember]
    public string FileContents
    {
        get
        {
            return fileContents;
        }

        set
        {
            fileContents = value;
        }
    }
    [DataMember]
    public int SaveID
    {
        get
        {
            return saveID;
        }

        set
        {
            saveID = value;
        }
    }

    //This member is not serialized as there is no need to do so and it would compromise
    //security.
    public Client LockedUser
    {
        get
        {
            return lockedUser;
        }

        set
        {
            lockedUser = value;
        }
    }
    #endregion

    #region Constructors
    //These are the constructors for the document class.
    //The first one creates a Document with a name and contents and the second one opens
    //it from file or creates it if it doesn't already exist.
    public Document(string fileName, string contents)
    {
        this.FileName = fileName;
        this.FileContents = contents;
        this.SaveID = 1;
        this.patches = new Dictionary<int, List<Patch>>();
        //This sets the first patch to empty.
        this.patches.Add(0, new List<Patch>());
        this.diffMatch = new diff_match_patch();
    }

    public Document(string fileName)
    {
        this.FileName = fileName;
        this.FileContents = "";
        this.SaveID = 1;
        this.patches = new Dictionary<int, List<Patch>>();
        //This sets the first patch to empty.
        this.patches.Add(0, new List<Patch>());
        this.diffMatch = new diff_match_patch();

        //If the file exist, read it. Otherwise, create it and make it blank.
        if (!File.Exists(pathToDir + FILE_LOCATION + this.fileName))
        {
            File.Create(pathToDir + FILE_LOCATION + this.fileName);
        }
        else
        {
            FileContents = File.ReadAllText(pathToDir + FILE_LOCATION + this.fileName);

        }
    }
    #endregion

    #region Private Methods
    //This area contains all methods that are private.
    //Writes the Document to file.
    private void writeToFile()
    {
        try
        {
            File.WriteAllText(pathToDir + FILE_LOCATION + fileName, fileContents);
            Console.WriteLine("Writing: " + this.FileName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    #endregion

    #region Public Methods
    //This area contains all methods that are public
    //The client uses this to send file changes to the server.
    public FailureType changeDocument(List<Patch> changes)
    {
        this.patches.Add(patches.Last().Key + 1, changes);
        return FailureType.Good;
    }

    //Returns a Dictionary of changes that the user ask for.
    public Dictionary<int, List<Patch>> getChanges(int last)
    {
        Dictionary<int, List<Patch>> returnValue = new Dictionary<int, List<Patch>>();
        for (int i = last; i <= patches.Last().Key; i++)
        {
            returnValue.Add(this.patches.ElementAt(i).Key, this.patches.ElementAt(i).Value);
        }
        return returnValue;
    }

    //The patches are applied to the file contents and then written to file.
    public FailureType saveDocument()
    {
        for (int i = SaveID; i <= patches.Last().Key; i++)
        {
            //Applied the patches and gets the contents.
            Object[] temp = diffMatch.patch_apply(this.patches.ElementAt(i).Value, this.fileContents);
            fileContents = temp[0].ToString();
        }
        //Sets save id so the server and clients know when the last time the server saved was.
       this.SaveID = this.patches.Last().Key + 1;
        //Writes the Document to file.
        writeToFile();
        return FailureType.Good;
    }

    //Returns the key value of the last patch in the dictionary 'patches'
    public int getLastPatchID()
    {
        return this.patches.Keys.Last();
    }
    #endregion
}

