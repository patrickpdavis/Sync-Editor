//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

/// <summary>
/// This class is an extension of the list class and is oriented towards manipulating clients.
/// </summary>
public class ClientList : List<Client>
{
    #region Public Methods
    //Finds a user in the list and returns them.
    //Returns null if the user is not in list.
    public int findIndexByName(string name)
    {
        //Finds user.
        int index;
        index = this.FindIndex(item => name == item.Name);

        //Fails if they don't exist.
        if (index >= 0)
        {
            return index;
        }
        else
        {
            return -1;
        }
    }

    // If user exist it returns good, but if the user exist but the password does not match,
    // it returns bad password otherwise it returns user does not exist.
    public virtual FailureType UserExist(Client user)
    {
        //Finds the user.
        int index;
        index = findIndexByName(user.Name);

        //Fails if they don't exist.
        if (index == -1)
        {
            return FailureType.FailedUserDoesNotExist;
        }

        Client tempUser = this.ElementAt(index);

        if (tempUser == null)
        {
            return FailureType.FailedUserDoesNotExist;
        }

        //Checks password.
        if (Client.checkPassword(tempUser, user.Password) == true)
        {
            return FailureType.Good;
        }
        else
        {
            return FailureType.FailedBadPassword;
        }
    }

    // Checks if a user exist and if it does it returns the status of the admin
    // variable attached to the user.
	public FailureType UserIsAdmin(Client user)
    {
        //Finds the user.
        int index;
        index = findIndexByName(user.Name);

        //Fails if the user doesn't exist.
        if (index == -1)
        {
            return FailureType.FailedUserDoesNotExist;
        }

        //Pulls the user from the list
        Client tempUser = this.ElementAt(index);

        //if the user doesn't exist it fails.
        if (tempUser == null)
        {
            return FailureType.FailedUserDoesNotExist;
        }
        //If the user's password is bad or the user is not an admin it is good otherwise it fails..
        if (tempUser.Password == user.Password && tempUser.Admin == true)
        {

            return FailureType.Good;
        }

        else if (tempUser.Password != user.Password)
        {
            return FailureType.FailedBadPassword;
        }
        else
        {
            return FailureType.FailedUserNotAdmin;
        }

    }

    //Sets a user to admin if the connectinguser is an admin.
    public FailureType setAdmin(Client user, string targetName, bool newSetting)
    {
        //Finds the source and target Users.
        int indexAdmin, indexTarget;
        indexAdmin = findIndexByName(user.Name);
        indexTarget = findIndexByName(targetName);

        //Fails if either is not found.
        if (indexAdmin == -1 || indexTarget == -1)
        {
            return FailureType.FailedUserDoesNotExist;
        }

        //Admin user copy
        Client tempUser = this.ElementAt(indexAdmin);

        //If the admin is false it fails otherwise it sets the target to an admin
        if (tempUser.Admin == false)
        {
            return FailureType.FailedUserNotAdmin;
        }
        else
        {
            this.ElementAt(indexTarget).Admin = true;
            Console.WriteLine("Set user to admin: " + targetName);
            return FailureType.Good;
        }

    }

    // Changes the taret users password. This will work if user is the same as target and password is good
    // or if the user is an admin.
	public FailureType UserChangePassword(Client user, string targetName, string newPassword)
    {
        //Finds the Source and target user.
        int indexAdmin, indexTarget;
        indexAdmin = findIndexByName(user.Name);
        indexTarget = findIndexByName(targetName);

        //Fails if either doesn't exist.
        if (indexAdmin == -1 || indexTarget == -1)
        {
            return FailureType.FailedUserDoesNotExist;
        }

        //Gets a temporary object.
        Client tempUser = this.ElementAt(indexAdmin);

        //Changes the password.
        if (tempUser.Password == user.Password || tempUser.Admin == true)
        {
            this.ElementAt(indexTarget).Password = newPassword;
            this.ElementAt(indexTarget).writeToFile();
            Console.WriteLine("Changed password for: " + targetName);
            return FailureType.Good;
        }
        //Fails if source is not an admin or not target.
        else if (tempUser.Admin == false)
        {
            return FailureType.FailedUserNotAdmin;
        }
        //Fails if the password is bad for the source.
        else
        {
            return FailureType.FailedBadPassword;
        }
    }

    // Checks if a user exist and if they dont it adds them to the list.
    public FailureType AddNewUser(Client user)
    {
        try
        {
            //Fails if the user exist
            if (this.UserExist(user) == FailureType.FailedUserDoesNotExist)
            {
                //Hashes password for user.
                user = Client.hashPassword(user);
                user.lastText = DateTime.UtcNow;
                this.Add(user);
                user.writeToFile();
            }
            else
            {
                return FailureType.FailedUserAlreadyExist;
            }
        }
        catch
        {
            return FailureType.FailedUnknownReason;
        }
        Console.WriteLine("User added to collection: " + user.Name);
        return FailureType.Good;
    }

    // Deletes a user.
    // code needs to be added to delete their file
    public FailureType deleteUser(Client user)
    {
        //Removes user from the list.
        this.RemoveAll(y => y.Name == user.Name);
        //Deletes their xml file.
        try {
            File.Delete(Client.pathToDir + Client.USER_LOCATION + user.Name + Client.XML_EXT);
            Console.WriteLine("Deleted User: " + user.Name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return FailureType.Good;
    }
    #endregion
}

